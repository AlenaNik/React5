{"version":3,"sources":["Components/GenerateQuote.jsx","Components/DisplayQuote.jsx","App.js","serviceWorker.js","index.js"],"names":["GenerateQuote","_ref","selectSimpson","react_default","a","createElement","className","onClick","DisplayQuote","simpson","src","image","alt","character","quote","sampleQuote","characterDirection","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","response","json","data","setState","_this3","Components_GenerateQuote","getQuote","Components_DisplayQuote","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAUiBA,SARM,SAAAC,GAAuB,IAApBC,EAAoBD,EAApBC,cACtB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACXH,EAAAC,EAAAC,cAAA,UAAQE,QAASL,EAAeI,UAAU,gEAA1C,oBCSKE,EAZK,SAAAP,GAAiB,IAAdQ,EAAcR,EAAdQ,QACrB,OACIN,EAAAC,EAAAC,cAAA,OAAMC,UAAU,wDACZH,EAAAC,EAAAC,cAAA,OAAMC,UAAU,eAAeI,IAAKD,EAAQE,MAAQC,IAAI,YACxDT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACVH,EAAAC,EAAAC,cAAA,0BAAkBI,EAAQI,WAC1BV,EAAAC,EAAAC,cAAA,6BAAqBI,EAAQK,UCFvCC,EAAc,CAChBD,MAAM,wEACND,UAAU,eACVF,MAAM,8FACNK,mBAAoB,QA8BTC,cA1BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTjB,QAAUM,GAHCI,0EAMR,IAAAQ,EAAAL,KACPM,MAAM,0DACDC,KAAK,SAAAC,GAAQ,OAAMA,EAASC,SAC5BF,KAAK,SAAAG,GACFL,EAAKM,SAAS,CACVxB,QAAUuB,EAAK,wCAItB,IAAAE,EAAAZ,KACL,OACInB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC8B,EAAD,CAAgBjC,cAAe,kBAAOgC,EAAKE,cAC3CjC,EAAAC,EAAAC,cAACgC,EAAD,CAAc5B,QAASa,KAAKI,MAAMjB,kBApBhC6B,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.ec42c4ef.chunk.js","sourcesContent":["import  React  from 'react';\n\nconst  GenerateQuote = ({ selectSimpson }) => {\n    return (\n        <div className=\"lightest-blue grow bw2 shadow-5\">\n            <button onClick={selectSimpson} className=\"f6 grow no-underline br-pill ba bw2 ph3 pv2 mb2 dib hot-pink\">Hope it works</button>\n        </div>\n    );\n};\n\nexport  default  GenerateQuote;\n","import  React  from 'react';\n\nconst  DisplayQuote = ({ simpson }) => {\n    return (\n        <div  className=\"tc bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img  className=\"ImageSimpson\" src={simpson.image}  alt=\"simpson\"  />\n            <ul className=\"avenir b f2\">\n                <li> Character : {simpson.character}</li>\n                <li> His/her quote: {simpson.quote}</li>\n            </ul>\n        </div>\n    );\n};\n\nexport  default  DisplayQuote;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport  GenerateQuote  from './Components/GenerateQuote';\nimport  DisplayQuote  from './Components/DisplayQuote';\n\n\nconst sampleQuote = {\n    quote:\"Shoplifting is a victimless crime, like punching someone in the dark.\",\n    character:\"Nelson Muntz\",\n    image:\"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FNelsonMuntz.png?1497567511185\",\n    characterDirection: \"Left\"\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            simpson:  sampleQuote,\n        }\n    }\n    getQuote() {\n        fetch(\"https://thesimpsonsquoteapi.glitch.me/quotes?count=num\")\n            .then(response  =>  response.json())\n            .then(data  => {\n                this.setState({\n                    simpson:  data[0],\n                });\n            });\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <GenerateQuote  selectSimpson={() =>  this.getQuote()}  />\n                <DisplayQuote simpson={this.state.simpson}  />\n\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}